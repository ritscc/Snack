// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: channel/v1/channel.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChannelService_CreateChannel_FullMethodName = "/channel.v1.ChannelService/CreateChannel"
	ChannelService_GetChannel_FullMethodName    = "/channel.v1.ChannelService/GetChannel"
	ChannelService_UpdateChannel_FullMethodName = "/channel.v1.ChannelService/UpdateChannel"
	ChannelService_DeleteChannel_FullMethodName = "/channel.v1.ChannelService/DeleteChannel"
)

// ChannelServiceClient is the client API for ChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelServiceClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*Channel, error)
	UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Only Admin and Creator can delete
	DeleteChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type channelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelServiceClient(cc grpc.ClientConnInterface) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelService_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, ChannelService_GetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelService_UpdateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) DeleteChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelService_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelServiceServer is the server API for ChannelService service.
// All implementations must embed UnimplementedChannelServiceServer
// for forward compatibility
type ChannelServiceServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*emptypb.Empty, error)
	GetChannel(context.Context, *ChannelID) (*Channel, error)
	UpdateChannel(context.Context, *Channel) (*emptypb.Empty, error)
	// Only Admin and Creator can delete
	DeleteChannel(context.Context, *ChannelID) (*emptypb.Empty, error)
	mustEmbedUnimplementedChannelServiceServer()
}

// UnimplementedChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelServiceServer struct {
}

func (UnimplementedChannelServiceServer) CreateChannel(context.Context, *CreateChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelServiceServer) GetChannel(context.Context, *ChannelID) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedChannelServiceServer) UpdateChannel(context.Context, *Channel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedChannelServiceServer) DeleteChannel(context.Context, *ChannelID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChannelServiceServer) mustEmbedUnimplementedChannelServiceServer() {}

// UnsafeChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelServiceServer will
// result in compilation errors.
type UnsafeChannelServiceServer interface {
	mustEmbedUnimplementedChannelServiceServer()
}

func RegisterChannelServiceServer(s grpc.ServiceRegistrar, srv ChannelServiceServer) {
	s.RegisterService(&ChannelService_ServiceDesc, srv)
}

func _ChannelService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).GetChannel(ctx, req.(*ChannelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_UpdateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).UpdateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServiceServer).DeleteChannel(ctx, req.(*ChannelID))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelService_ServiceDesc is the grpc.ServiceDesc for ChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.v1.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChannelService_GetChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _ChannelService_UpdateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelService_DeleteChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/v1/channel.proto",
}

const (
	MessageChannelService_LeaveMessageChannel_FullMethodName = "/channel.v1.MessageChannelService/LeaveMessageChannel"
	MessageChannelService_JoinMessageChannel_FullMethodName  = "/channel.v1.MessageChannelService/JoinMessageChannel"
)

// MessageChannelServiceClient is the client API for MessageChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageChannelServiceClient interface {
	LeaveMessageChannel(ctx context.Context, in *MessageChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	JoinMessageChannel(ctx context.Context, in *MessageChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messageChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageChannelServiceClient(cc grpc.ClientConnInterface) MessageChannelServiceClient {
	return &messageChannelServiceClient{cc}
}

func (c *messageChannelServiceClient) LeaveMessageChannel(ctx context.Context, in *MessageChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessageChannelService_LeaveMessageChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageChannelServiceClient) JoinMessageChannel(ctx context.Context, in *MessageChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessageChannelService_JoinMessageChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageChannelServiceServer is the server API for MessageChannelService service.
// All implementations must embed UnimplementedMessageChannelServiceServer
// for forward compatibility
type MessageChannelServiceServer interface {
	LeaveMessageChannel(context.Context, *MessageChannelRequest) (*emptypb.Empty, error)
	JoinMessageChannel(context.Context, *MessageChannelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessageChannelServiceServer()
}

// UnimplementedMessageChannelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageChannelServiceServer struct {
}

func (UnimplementedMessageChannelServiceServer) LeaveMessageChannel(context.Context, *MessageChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMessageChannel not implemented")
}
func (UnimplementedMessageChannelServiceServer) JoinMessageChannel(context.Context, *MessageChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMessageChannel not implemented")
}
func (UnimplementedMessageChannelServiceServer) mustEmbedUnimplementedMessageChannelServiceServer() {}

// UnsafeMessageChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageChannelServiceServer will
// result in compilation errors.
type UnsafeMessageChannelServiceServer interface {
	mustEmbedUnimplementedMessageChannelServiceServer()
}

func RegisterMessageChannelServiceServer(s grpc.ServiceRegistrar, srv MessageChannelServiceServer) {
	s.RegisterService(&MessageChannelService_ServiceDesc, srv)
}

func _MessageChannelService_LeaveMessageChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageChannelServiceServer).LeaveMessageChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageChannelService_LeaveMessageChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageChannelServiceServer).LeaveMessageChannel(ctx, req.(*MessageChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageChannelService_JoinMessageChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageChannelServiceServer).JoinMessageChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageChannelService_JoinMessageChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageChannelServiceServer).JoinMessageChannel(ctx, req.(*MessageChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageChannelService_ServiceDesc is the grpc.ServiceDesc for MessageChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.v1.MessageChannelService",
	HandlerType: (*MessageChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaveMessageChannel",
			Handler:    _MessageChannelService_LeaveMessageChannel_Handler,
		},
		{
			MethodName: "JoinMessageChannel",
			Handler:    _MessageChannelService_JoinMessageChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/v1/channel.proto",
}

const (
	ChannelEventService_CreateChannelEvent_FullMethodName = "/channel.v1.ChannelEventService/CreateChannelEvent"
	ChannelEventService_GetChannelEvent_FullMethodName    = "/channel.v1.ChannelEventService/GetChannelEvent"
	ChannelEventService_UpdateChannelEvent_FullMethodName = "/channel.v1.ChannelEventService/UpdateChannelEvent"
	ChannelEventService_DeleteChannelEvent_FullMethodName = "/channel.v1.ChannelEventService/DeleteChannelEvent"
)

// ChannelEventServiceClient is the client API for ChannelEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelEventServiceClient interface {
	CreateChannelEvent(ctx context.Context, in *CreateChannelEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannelEvent(ctx context.Context, in *ChannelEventID, opts ...grpc.CallOption) (*ChannelEvent, error)
	UpdateChannelEvent(ctx context.Context, in *ChannelEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Only Admin and Creator can delete
	DeleteChannelEvent(ctx context.Context, in *ChannelEventID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type channelEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelEventServiceClient(cc grpc.ClientConnInterface) ChannelEventServiceClient {
	return &channelEventServiceClient{cc}
}

func (c *channelEventServiceClient) CreateChannelEvent(ctx context.Context, in *CreateChannelEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelEventService_CreateChannelEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelEventServiceClient) GetChannelEvent(ctx context.Context, in *ChannelEventID, opts ...grpc.CallOption) (*ChannelEvent, error) {
	out := new(ChannelEvent)
	err := c.cc.Invoke(ctx, ChannelEventService_GetChannelEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelEventServiceClient) UpdateChannelEvent(ctx context.Context, in *ChannelEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelEventService_UpdateChannelEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelEventServiceClient) DeleteChannelEvent(ctx context.Context, in *ChannelEventID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChannelEventService_DeleteChannelEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelEventServiceServer is the server API for ChannelEventService service.
// All implementations must embed UnimplementedChannelEventServiceServer
// for forward compatibility
type ChannelEventServiceServer interface {
	CreateChannelEvent(context.Context, *CreateChannelEventRequest) (*emptypb.Empty, error)
	GetChannelEvent(context.Context, *ChannelEventID) (*ChannelEvent, error)
	UpdateChannelEvent(context.Context, *ChannelEvent) (*emptypb.Empty, error)
	// Only Admin and Creator can delete
	DeleteChannelEvent(context.Context, *ChannelEventID) (*emptypb.Empty, error)
	mustEmbedUnimplementedChannelEventServiceServer()
}

// UnimplementedChannelEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChannelEventServiceServer struct {
}

func (UnimplementedChannelEventServiceServer) CreateChannelEvent(context.Context, *CreateChannelEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelEvent not implemented")
}
func (UnimplementedChannelEventServiceServer) GetChannelEvent(context.Context, *ChannelEventID) (*ChannelEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelEvent not implemented")
}
func (UnimplementedChannelEventServiceServer) UpdateChannelEvent(context.Context, *ChannelEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelEvent not implemented")
}
func (UnimplementedChannelEventServiceServer) DeleteChannelEvent(context.Context, *ChannelEventID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelEvent not implemented")
}
func (UnimplementedChannelEventServiceServer) mustEmbedUnimplementedChannelEventServiceServer() {}

// UnsafeChannelEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelEventServiceServer will
// result in compilation errors.
type UnsafeChannelEventServiceServer interface {
	mustEmbedUnimplementedChannelEventServiceServer()
}

func RegisterChannelEventServiceServer(s grpc.ServiceRegistrar, srv ChannelEventServiceServer) {
	s.RegisterService(&ChannelEventService_ServiceDesc, srv)
}

func _ChannelEventService_CreateChannelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelEventServiceServer).CreateChannelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelEventService_CreateChannelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelEventServiceServer).CreateChannelEvent(ctx, req.(*CreateChannelEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelEventService_GetChannelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelEventServiceServer).GetChannelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelEventService_GetChannelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelEventServiceServer).GetChannelEvent(ctx, req.(*ChannelEventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelEventService_UpdateChannelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelEventServiceServer).UpdateChannelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelEventService_UpdateChannelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelEventServiceServer).UpdateChannelEvent(ctx, req.(*ChannelEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelEventService_DeleteChannelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelEventServiceServer).DeleteChannelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChannelEventService_DeleteChannelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelEventServiceServer).DeleteChannelEvent(ctx, req.(*ChannelEventID))
	}
	return interceptor(ctx, in, info, handler)
}

// ChannelEventService_ServiceDesc is the grpc.ServiceDesc for ChannelEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChannelEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "channel.v1.ChannelEventService",
	HandlerType: (*ChannelEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannelEvent",
			Handler:    _ChannelEventService_CreateChannelEvent_Handler,
		},
		{
			MethodName: "GetChannelEvent",
			Handler:    _ChannelEventService_GetChannelEvent_Handler,
		},
		{
			MethodName: "UpdateChannelEvent",
			Handler:    _ChannelEventService_UpdateChannelEvent_Handler,
		},
		{
			MethodName: "DeleteChannelEvent",
			Handler:    _ChannelEventService_DeleteChannelEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/v1/channel.proto",
}
