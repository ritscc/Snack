syntax = "proto3";

package snack.channel.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service ChannelService {
  rpc CreateChannel(CreateChannelRequest) returns (google.protobuf.Empty) {}
  rpc GetChannel(ChannelID) returns (Channel) {}
  rpc UpdateChannel(Channel) returns (google.protobuf.Empty) {}
  // Only Admin and Creator can delete
  rpc DeleteChannel(ChannelID) returns (google.protobuf.Empty) {}
}

// メッセージチャンネルの機能（メッセージチャンネルに入らないとメッセージが見れない）
service MessageChannelService {
  rpc LeaveMessageChannel(MessageChannelRequest) returns (google.protobuf.Empty) {}
  rpc JoinMessageChannel(MessageChannelRequest) returns (google.protobuf.Empty) {}
}

//  ボイスチャンネルに入る
/* service VoiceChannelService {             */
/*   rpc LeaveMessageChannel() returns () {} */
/*   rpc JoinMessageChannel() returns () {}  */
/* }                                         */

// KC3やHackathonのEventをいつやるかなどチャンネルに告知する機能
service ChannelEventService {
  rpc CreateChannelEvent(CreateChannelEventRequest) returns (google.protobuf.Empty) {}
  rpc GetChannelEvent(ChannelEventID) returns (ChannelEvent) {}
  rpc UpdateChannelEvent(ChannelEvent) returns (google.protobuf.Empty) {}
  // Only Admin and Creator can delete
  rpc DeleteChannelEvent(ChannelEventID) returns (google.protobuf.Empty) {}
}

message ChannelID {
  int64 channel_id = 1;
}

message Channel {
  oneof channel_group {
    DefaultChannel default_channel = 1;
    PrivateChannel private_channel = 2;
    DMChannel dm_channel = 3;
  }
}

enum ChannelType {
  CHANNEL_TEXT = 0;
  CHANNEL_VOICE = 1;
}

message DefaultChannel {
  int64 channel_id = 1;
  ChannelType channel_type = 2;
  int64 position = 3;
  string name = 4;
  bool private = 5;
  bool nsfw = 6;
  repeated int64 user_id = 7;
}

// 個人チャンネル
message PrivateChannel {
  int64 channel_id = 2;
  int64 user_id = 1;
}

// 1v1のダイレクトメッセージチャンネル
message DMChannel {
  int64 channel_id = 1;
  int64 other_user_id = 2;
}

// 通知を行うチャンネル
message ChannelSubscription {
  int64 channel_id = 1;
  bool notify = 2;
}

message CreateChannelRequest {
  oneof create_channel_group {
    CreateDefaultChannelRequest default_channel_request = 1;
    CreateDMRequest dm_channel_request = 2;
  }
}

message CreateDefaultChannelRequest {
  ChannelType channel_type = 1;
  int64 position = 2;
  string name = 3;
  bool private = 4;
  bool nsfw = 5;
  repeated int64 user_id = 6;
}

message CreateDMRequest {
  int64 other_user_id = 1;
}

message MessageChannelRequest {
  int64 channel_id = 1;
}

// KC3やHackathonのEventをいつやるかなどチャンネルに告知する機能
message ChannelEvent {
  int64 id = 1;
  int64 channel_id = 2;
  string event_type = 3;
  string title = 4;
  string detail = 5;
  google.protobuf.Timestamp date = 6;
}

message CreateChannelEventRequest {
  int64 channel_id = 1;
  string event_type = 2;
  string title = 3;
  string detail = 4;
  google.protobuf.Timestamp date = 5;
}

message ChannelEventID {
  int64 channel_event_id = 1;
}
