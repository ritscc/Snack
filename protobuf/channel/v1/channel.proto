syntax = "proto3";

package snack.channel.v1;

import "google/protobuf/timestamp.proto";

service Channel {
  rpc CreateChannel() returns () {}
  rpc GetChannel() returns () {}
  rpc ModifyChannel() returns () {}
  rpc DeleteChannel() returns () {}

  /* rpc ChannelStream(stream ChannelMessage) returns (stream ChannelMessage) {} */
}

message ChannelMessage {
  RequestType request_type = 1;
  oneof channel_group {
    DefaultChannel default_channel = 2;
    DMChannel dm_channel = 3;
    ChannelEvent channel_event = 4;
  }
}

enum ChannelType {
  CHANNEL_TEXT = 0;
  CHANNEL_VOICE = 1;
}

enum RequestType {
  CHANNEL_CREATE = 0;
  CHANNEL_UPDATE = 1;
  CHANNEL_READ = 2;
  CHANNEL_DELETE = 3;
  CHANNEL_JOIN = 4;
  CHANNEL_EVENT_CREATE = 5;
  CHANNEL_EVENT_UPDATE = 6;
  CHANNEL_EVENT_READ = 7;
  CHANNEL_EVENT_DELETE = 8;
}

message DefaultChannel {
  string id = 1;
  ChannelType channel_type = 2;
  int64 position = 3;
  string name = 4;
  bool private = 5;
  bool nsfw = 6;
  repeated string user_id = 7;
}

// 個人チャンネル
message PrivateChannel {
  string channel_id = 2;
  string user_id = 1;
}

// 1v1のダイレクトメッセージチャンネル
message DMChannel {
  string channel_id = 2;
  string other_user_id = 1;
}

// 通知を行うチャンネル
message ChannelSubscription {
  string channel_id = 1;
  bool notify = 2;
}

// KC3やHackathonのEventをいつやるかなどチャンネルに告知する機能
message ChannelEvent {
  string id = 1;
  string channel_id = 2;
  string event_type = 3;
  string detail = 4;
  google.protobuf.Timestamp date_time = 5;
}
